#!/usr/bin/env ruby
#
# == Synopsis 
#   This programm generates a group mobility model
#   specified through the as argument specification
#   bla blub
#
# == Examples
#   This command print out some simple statistics
#   grmoge scenario.conf
#
# == Usage 
#   grmoge [options] <scenario-files>
#
#   For help use: grmoge -h
#
# == Options
#   -h, --help          Displays help message
#   -v, --verbose       Verbose output
#   -V, --version       Display the version, then exit
#   -q, --quiet         Output as little as possible, overrides verbose
#   -f, --format        Specify the output format (ns2)
#   -p, --plotterrain   Plot terrain map
#
# == Author
#   Hagen Paul Pfeifer <hagen@jauu.net>
#
# == Copyright
#   Copyright (c) 2008 Hagen Paul Pfeifer



# max count of coordinate cells
$max_area_division = 100


# max variation in path calculation process
# in procent
$max_path_variation_percent = 10
$max_meter_diff = 2000


# the next threshold defines a lower limit since
# there is no more track spliting applied. The 
# assumption behind these limit is that under
# 500 meter a unit is in the ability to
# reach the final waypoint directly (without
# detours)
$track_min_snap_threshold = 500


# only for developing process relevant
$run_unit_tests = false


class Group

	attr_accessor :name, :waypoints
	attr_reader :waypoint_segments_angle

	attr_accessor :track

	public


	def initialize( group, terrain_map )

		@name      = group["Name"] ? group["Name"] : "nameless"
		@waypoints = group["Waypoints"]

		if group["VelocityMode"]
			if (group["VelocityMode"].casecmp( "uniform" ))
				@velocity_mode = :uniform
			elsif (group["VelocityMode"].casecmp( "variable" ))
				@velocity_mode = :variable
			else
				GrMoGe.err "not a valid velocity mode: #{group["VelocityMode"]}"
			end

		else
			@velocity_mode = :uniform
		end

		sanity_check( terrain_map )

		calc_waypoint_segments_angle_and_dist

	end

	def set_group_track( track )
		@track = track
	end


	def verify_track( track )

		# a track requires at least start and end coodinates,
		# check this ...
		if track.size < 2
			GrMoGe.err("no real track - start or end missing")
		end

	end

	# try to find the ideal track for the given start and
	# endpoint (including all intermediate waypoints
	def determine_ideal_track( map )

		ideal_track = Array.new
		current_ideal_costs = nil
		current_ideal_track = nil

		# loop 1000 times to find the ideal track
		# after this we assume that this is the
		# best track[tm]
		10.times do |iteration|

			new_track_proposal = propose_ideal_track( map )
			new_cost_of_track = calculate_track_costs( new_track_proposal, map )

			if (current_ideal_track == nil) # first time
				current_ideal_costs = new_cost_of_track
				current_ideal_track = new_track_proposal
			end

			puts "iteration #{iteration} costs #{new_cost_of_track}"

			# replace the current track if
			# we found a superior track (cheaper one)
			if new_cost_of_track <= current_ideal_costs
				current_ideal_costs = new_cost_of_track
				current_ideal_track = new_track_proposal
			end

		end

		# ok, we found the cheapest track - hopefully
		return current_ideal_track
	end


	private

	def max( a, b)
		a > b ? a : b
	end

	def min( a, b)
		a > b ? b : a
	end


	# iterate over all points and
	# accumulate the costs
	def calculate_track_costs( track, map )

		accumulated_costs = 0

		(track.size - 1).times do |track_section|

			track_prev_x = track[track_section][0]
			track_prev_y = track[track_section][1]

			track_next_x = track[track_section + 1][0]
			track_next_y = track[track_section + 1][1]

			angle = diff_to_reference_angle(track[track_section],
											track[track_section + 1])


			diff_distance = track_distance(track[track_section],
										   track[track_section + 1]).ceil

			diff_distance.times do |distance|
				coordinate = calc_subtrack_divider(track[track_section],
												   track[track_section + 1],
												   angle,
												   distance)

				accumulated_costs += map.score_for_coordinate(coordinate[0],
															  coordinate[1])

			end
		end

		# got it!
		return accumulated_costs
	end


	# expect an array of form [x, y] to calculate
	# the distance between these two coordinates
	# pythagorean theorem ;-)
	def track_distance( start_coordinate, end_coordinate )

		x_diff = max(start_coordinate[0], end_coordinate[0]) -
			min(start_coordinate[0], end_coordinate[0])

		y_diff = max(start_coordinate[1], end_coordinate[1]) -
			min(start_coordinate[1], end_coordinate[1])

		length = Math.sqrt((x_diff ** 2) + (y_diff ** 2))

		return length
	end


	def diff_to_reference_angle( coordinate_a, coordinate_b)

		coordinate_c = Array.new(2)

		# XXX: you can remove the outer
		# condition, but I introduced them
		# to let this here for futher version
		# with negative x and y values
		if coordinate_a[0] < coordinate_b[0]

			if coordinate_a[1] < coordinate_b[1]
				coordinate_c[0] = coordinate_b[0]
				coordinate_c[1] = coordinate_a[1]
			elsif coordinate_a[1] > coordinate_b[1]
				coordinate_c[0] = coordinate_a[0]
				coordinate_c[1] = coordinate_b[1]
			else
				GrMoGe.err
			"Both coordinates are on one axis - thats not allowd!"
			end

		elsif coordinate_a[0] > coordinate_b[0]

			if coordinate_a[1] < coordinate_b[1]
				coordinate_c[0] = coordinate_b[0]
				coordinate_c[1] = coordinate_a[1]
			elsif coordinate_a[1] > coordinate_b[1]
				coordinate_c[0] = coordinate_a[0]
				coordinate_c[1] = coordinate_b[1]
			else
				GrMoGe.err
			"Both coordinates are on one axis - thats not allowd!"
			end
		else
			GrMoGe.err
			"Both coordinates are on one axis - thats not allowd!"
		end

		ab_dist = track_distance(coordinate_a, coordinate_b)
		ac_dist = track_distance(coordinate_a, coordinate_c)
		bc_dist = track_distance(coordinate_b, coordinate_c)

		angle = Math.asin(bc_dist.to_f / ab_dist)

		return angle
	end

	def calc_subtrack_angle( start_coordinate, end_coordinate)

		a = start_coordinate
		b = end_coordinate

		a_b_angle = diff_to_reference_angle(a, b)

		return a_b_angle
	end


	def calc_subtrack_divider(start_coordinate, end_coordinate, angle, distance)

		ad = distance

		# calc new {de,ad} depending on the calculated angle
		#
		#              opposite leg 
		# sin alpha =  ------------
		#              adjacent leg
		#
		#              adjacent leg
		# cos alpha =  ------------
		#              opposite leg 
		#
		de = (distance * Math.sin(angle))
		ad = (distance * Math.cos(angle))

		# add y offset
		de += min(start_coordinate[1], end_coordinate[1])
		# add x offset
		ad += min(start_coordinate[0], end_coordinate[0])

		new_coordinate = [ad.to_i, de.to_i]

		return new_coordinate
	end

	def calc_real_sub_coordinate(subcoordiante, angle)

		n_point = Array.new

		if rand(2) == 1

			# left
			l_rad = angle + 90.deg2rad
			ank = GrMoGe.random(0, $max_meter_diff)
			geg = (ank * Math.sin(l_rad)).to_i
			#          x,               y
			n_point = [ subcoordiante[0] - ank, subcoordiante[1] + geg ]

			if (n_point[0] > 0 && n_point[0] < 10000 &&
				n_point[1] < 10000 && n_point[1] > 0)
			end

		else

			# right
			l_rad = angle + 90.deg2rad
			ank = GrMoGe.random(0, $max_meter_diff)
			geg = (ank * Math.sin(l_rad)).to_i
			#          x,               y
			n_point = [ subcoordiante[0] + ank, subcoordiante[1] - geg ]
			if (n_point[0] > 0 && n_point[0] < 10000 &&
				n_point[1] < 10000 && n_point[1] > 0)
			end
		end

		return n_point

	end


	# this method deals only with two
	# coordiantes: start and end coordinates
	def propose_ideal_subtracks(start_coordinate, end_coordinate, map)

		subtracks = Array.new

		# calculate subtrack distance in meter
		length = track_distance(start_coordinate, end_coordinate)

		if length <= $track_min_snap_threshold
			# go directly to the next waypoint,
			# no subdivision allowed
			subtracks << end_coordinate
			return subtracks
		end

		# ok, we must split the way at least on time
		# so we enter a little loop ...
		# This loop must be resisdent against reentrant, because
		# of the redo statements in the next couple of lines
		while true

			subtrack_angle = calc_subtrack_angle(start_coordinate, end_coordinate)


			next_minor_waypoint_distance = GrMoGe.random( 20, length)

			subtrack_divider = calc_subtrack_divider(
				start_coordinate,
				end_coordinate,
				subtrack_angle,
				next_minor_waypoint_distance)

			system("echo #{subtrack_divider[0]} #{subtrack_divider[1]} >> /tmp/plot/data")

			# depending on the previous divider we
			# calculate the new _real subtrack (90 degree)
			# on the left or right side
			coordinate = calc_real_sub_coordinate(subtrack_divider, subtrack_angle)

			# a sanity check here
			if map.coordinate_out_of_space(coordinate) == true
				redo
			end

			system("echo #{coordinate[0]} #{coordinate[1]} >> /tmp/plot/data")


			# XXX: to make things not too
			# complicated, return here
			subtracks << coordinate
			subtracks << end_coordinate
			system("echo #{end_coordinate[0]} #{end_coordinate[1]} >> /tmp/plot/data")
			return subtracks

		end

		return subtracks
	end


	# this function is splited into
	# two different functional parts
	# first the method iterate over all
	# scenario file defined waypoints.
	# Between these two points a called
	# method (propose_ideal_subtrack) will
	# do the dirty
	def propose_ideal_track(map)

		# [[x0, y0], [x1, y1], [x2, y2], [x3, y3]]
		track = Array.new

		(@waypoints.size - 1).times do |way_start|
			system("echo #{@waypoints[way_start][1][0]} #{@waypoints[way_start][1][1]} >> /tmp/plot/data")
			tmp_track = propose_ideal_subtracks(@waypoints[way_start][1], @waypoints[way_start + 1][1], map)
			tmp_track.each do |coor| track << coor end
		end

		return track
	end


	def calc_waypoint_segments_angle_and_dist

		(0..(@waypoints.size - 2)).each do |waypoint|

			a = @waypoints[waypoint][1]
			b = @waypoints[waypoint + 1][1]

			# FIXME: add for all cases a branch
			#		 x,               y
			c = [max(a[0], b[0]), min(a[1], b[1])]

			ac_dist = max(c[0], a[0]) - min(c[0], a[0]).to_f
			bc_dist = max(c[1], b[1]) - min(c[1], b[1]).to_f

			# pythagorean theorem
			ab_dist = Math.sqrt((ac_dist ** 2).to_f + (bc_dist ** 2))

			@waypoints[waypoint] << Math.asin(bc_dist.to_f / ab_dist)
			@waypoints[waypoint] << ab_dist

		end

	end

	def sanity_check( terrain_map )

		if @waypoints.size < 2
			GrMoGe.err "At least two waypoints must be specified"
		end

		# check if the given waypoints are within the
		# terrain map
		@waypoints.each do |wa|
			x = wa[1][0]
			y = wa[1][1]
			if terrain_map.points_within_map( x, y) == false
				GrMoGe.err "Waypoint x #{x} y #{y} not valid (outside the map)"
			end

		end

	end


end # Group

class TerrainMap

	attr_accessor :terrain_map
	attr_accessor :field_edge_length
	attr_accessor :fields_x, :fields_y
	attr_accessor :x, :y, :options

	public

	def initialize( x, y, options )

		@x = x
		@y = y
		@options = options

		determine_coordinate_area_size( x, y )
		generate_terrain_map

	end

	def coordinate_out_of_space(coordinate)
		if coordinate[0] < 0  or
		   coordinate[0] > @x or
		   coordinate[1] < 0  or
		   coordinate[1] > @y
		   	return true
		else
			return false
		end
	end

	# determine field for the given
	# coordinate (x,y) and return the
	# corresponding penalty
	def score_for_coordinate( x, y )

		search_x = (x / @field_edge_length).to_i
		search_y = (y / @field_edge_length).to_i

		return @terrain_map[search_x][search_y]
	end

	def points_within_map( x, y)
		if x < 0 or y < 0 or x > @x or y > @y
			return false
		else
			return true
		end
	end


	def plot_terrain_map

		require 'tmpdir'

		curdir = Dir.getwd
		tmpdir = Dir.mktmpdir

		Dir.chdir(tmpdir)

		# write data file
		fh = open("terrain.data", "w");
		i = j = 1
		@terrain_map.each do |x|
			x.each do |y|
				fh.puts "#{i} #{j} #{y} "
				j += 1
			end
			fh.puts "\n"
			i += 1
			j = 1
		end
		fh.close

		# write gnuplot file
		gfh = open("terrain.gpi", "w");
		gfh.puts "set term postscript eps enhanced monochrome"
		gfh.puts "set terminal postscript enhanced \"Times\" 40"
		gfh.puts "set output \"terrain.eps\""
		gfh.puts "set size 4"
		gfh.puts "set pm3d"
		gfh.puts "splot \"terrain.data\" title \"Terrain Penalty Map\" with lines"
		gfh.close

		# generate eps and convert to pdf instantly
		system("gnuplot terrain.gpi")
		system("epstopdf --outfile=terrain.pdf terrain.eps")
		system("cp terrain.pdf #{curdir}")


		# jump back to our origin
		Dir.chdir(curdir)

		# delete tmp dir
		Dir.foreach(tmpdir) do |file|
			next if File.directory?(file)
			File.delete(tmpdir + "/" + file)
		end
		Dir.delete(tmpdir)

	end



	def unit_test
		100000.times do
			x_test = GrMoGe.random( 0, @x )
			y_test = GrMoGe.random( 0, @y )
			puts "terrain score test for x #{x_test} y #{y_test}"
			score_for_coordinate( x_test, y_test )
		end
	end

	private

	def generate_terrain_map

		@terrain_map = Array.new

		# generate random height points
		@fields_x.times do |x|
			@terrain_map[x] = Array.new
			@fields_y.times do |y|
				@terrain_map[x][y] = GrMoGe.random(0, 10)
			end
		end


		for n in (0..1)
			for x in (0..@fields_x - 1)
				for y in (0..@fields_y - 1)
					for a in [-1, 0, 1]
						for b in [-1, 0, 1]
							if (x + a >= 0 && x + a < @fields_x &&
								y + b >= 0 && y + b < @fields_y)
								@terrain_map[x][y] += @terrain_map[x+a][y+b]
							end
						end
					end
					@terrain_map[x][y] *= 0.075
				end
			end
		end

	end

	def determine_coordinate_area_size( x, y)

		if x > y
			longest_edge  = x
			shortest_edge = y
			x_is_larger   = true
		else
			longest_edge  = y
			shortest_edge = x
			x_is_larger   = false
		end

		ratio = (shortest_edge.to_f / longest_edge) * $max_area_division

		@field_edge_length = longest_edge / $max_area_division

		if x_is_larger == true
			@fields_x = $max_area_division + 1
			@fields_y = ratio.ceil
		else
			@fields_x = ratio.ceil
			@fields_y = $max_area_division + 1
		end
	end

end # class Terrain Map


class GrMoGe

	require 'optparse' 
	require 'rdoc/usage'
	require 'ostruct'
	require 'date'

	attr_accessor :options, :scenario_file
	$scenario = nil

	public

	def validate_scenario

		if !$scenario.include?( "Map" )
			puts "Your scenario did not specify a map (size)"
			exit( 1 )
		end

		if $scenario["Map"]["Size"][0] <= 0 or
			$scenario["Map"]["Size"][1] <= 0
			puts "Your specified map size is to small!"
			exit( 1 )
		end

		true
	end


	# both ranges are inclusive
	def GrMoGe.random( min, max )
		rand(max - min + 1) + min
	end
	def random( min, max )
		rand(max - min + 1) + min
	end

	def eval_scenario_file( filename )

		$stderr.puts "# parse scenario file: #{@scenario_file}" if @options.verbose

		file = File.new( filename, 'r' )

		buffer = "$scenario = {\n"
		buffer += file.read
		buffer += "\n}"

		file.close

		eval( buffer )

		if $scenario == nil
			puts "Your configuraion file did not specify a valid scenario, exiting"
			exit 1
		end

	end

	def initialize( arguments, stdin )
		@arguments = arguments
		@stdin = stdin

		# Set defaults
		@options = OpenStruct.new
		@options.verbose = false
		@options.quiet = false
		@options.plotterrain = false

	end

	# Parse options, check arguments, then process the command
	def parse_arguments

		if parsed_options? && arguments_valid? 

			process_arguments            

		else
			output_usage
		end

	end

	def parsed_options?

		# Specify options
		opts = OptionParser.new 
		opts.on('-V',        '--version')     { output_version ; exit 0 }
		opts.on('-h',        '--help')        { output_help }
		opts.on('-v',        '--verbose')     { @options.verbose = true }  
		opts.on('-q',        '--quiet')       { @options.quiet = true }
		opts.on('-p',        '--plotterrain') { @options.plotterrain = true }
		opts.on('-f [format]', '--format')    { |format| @options.format = format}

		opts.parse!(@arguments) rescue return false

		process_options
		true      
	end

	def process_options
		@options.verbose = false if @options.quiet
	end

	def arguments_valid?
		true if @arguments.length == 1 
	end

	# Setup the arguments
	def process_arguments
		@scenario_file = @arguments[0]
	end

	def output_help
		output_version
		RDoc::usage()
	end

	def output_usage
		RDoc::usage('usage')
	end

	def output_version
		$stderr.puts "#{File.basename(__FILE__)} version"
	end

	def run

		$stderr.puts "grmoge - Copyright (c) 2008 Hagen Paul Pfeifer"

		# init
		eval_scenario_file( @scenario_file )
		validate_scenario

		#generate map
		map = TerrainMap.new( $scenario["Map"]["Size"][0],
							 $scenario["Map"]["Size"][1], @options )
		if $run_unit_tests
			map.unit_test
		end

		# plot map if user request it
		map.plot_terrain_map if @options.plotterrain

		# group handling
		groups = parse_groups( $scenario, map )
		groups.each do |group|
			ideal_track = group.determine_ideal_track(map)
			group.verify_track( ideal_track )
			group.set_group_track(ideal_track)
		end


	end

	def GrMoGe.err( text )
		$stderr.puts("ERROR: #{text}")
		exit( 1 )
	end

	private

	def parse_groups( scenario, map )

		groups = Array.new

		$stderr.puts "# parse groups" if @options.verbose
		scenario["Groups"].each do |group|
			groups << Group.new(group, map)
		end

		$stderr.puts "# found #{groups.size} groups" if @options.verbose

		return groups
	end
end

class Numeric
	def deg2rad
		( self / 180.0 ) * Math::PI
	end

	def rad2deg
		( self / Math::PI ) * 180
	end
end


grmoge = GrMoGe.new(ARGV, STDIN)
grmoge.parse_arguments
grmoge.run
